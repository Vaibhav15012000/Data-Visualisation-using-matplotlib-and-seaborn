# -*- coding: utf-8 -*-
"""DAta Visualisation-matplotlib,seaborn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1niCCUpkH3V-7BQq-KK7s-V4IpFPsBdxd
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

boston_df=pd.read_csv("https://raw.githubusercontent.com/ammishra08/MachineLearning/master/Datasets/boston_train.csv")

print(boston_df)



"""**PLOTTING A LINE PLOT**"""

plt.figure(figsize=(5,5))
plt.plot(boston_df['AGE'])
plt.title('Boston Age group')

plt.figure(figsize=(10,5))
plt.plot(boston_df['AGE'], color='Red')
plt.title('Boston Age group')
plt.xlabel('Row Index')
plt.ylabel('AGE')
plt.show()

sort1=boston_df['AGE'].sort_values().unique()

plt.figure(figsize=(10,5))
plt.plot(sort1, color='Red')
plt.title('Boston Age group',fontsize = 20)
plt.xlabel('Row Index',fontsize=15)
plt.ylabel('AGE',fontsize=15)
plt.show()

"""BAR PLOT

FOR DISCRETE DATA AND FREQUENCIES
"""

plt.figure(figsize=(10,5))
plt.bar(boston_df['AGE'],height=boston_df['ZN'],color='orangered')
plt.title('BAR PLOT(ZN VS AGE)',fontsize=15)
plt.xlabel('AGE',fontsize=15)
plt.ylabel('ZN',fontsize=15)
plt.show()

"""HISTOGRAM PLOT

(RANGE VS FREQUECY)

FOR CONTINUOUS DATA DISTRIBUTUTION
"""

plt.figure(figsize=(10,5))
plt.hist(boston_df['MEDV'],color='purple',bins=25)
# here bins represent no of divisons in hostogram
plt.title('******Histogram*****',fontsize=15)
plt.xlabel('row indexes',fontsize=15)
plt.ylabel('MEDV',fontsize=15)
plt.show()

"""Scatter **plot**

relationship plot between X and Y
"""

iris_df = pd.read_csv('https://raw.githubusercontent.com/ammishra08/MachineLearning/master/Datasets/iris.csv')

iris_df

plt.figure(figsize=(10,5))
plt.scatter(x=iris_df['sepal_length'],y=iris_df['petal_length'],marker='s',color='red')
plt.scatter(x=iris_df['sepal_length'],y=iris_df['petal_width'],marker='*',color='blue')
plt.title('SCATTER PLOT',fontsize=15)
plt.xlabel('Sepal Length',fontsize=15)

plt.show()

plt.figure(figsize=(10,5))
plt.scatter(x=iris_df['sepal_length'],y=iris_df['sepal_width'],marker='s',color='red',label='SEPAL WIDTH')
plt.scatter(x=iris_df['sepal_length'],y=iris_df['petal_width'],marker='*',color='blue',label='PETAL WIDTH')
plt.title('SCATTER PLOT',fontsize=15)
plt.xlabel('Sepal Length',fontsize=15)
plt.legend(loc=4)  #for showing labels data and 'loc' atrribute is used for positin


plt.show()

plt.figure(figsize=(10,10))
sns.scatterplot(x='sepal_length',y='sepal_width',data=iris_df,marker='s', hue='species',color='magenta')
plt.show()

"""PLOTting A PIE CHART"""

plt.figure(figsize=(10,10))
daily_activities=[1,2,3,4,5,6]
names=['Sleep','Eat','Bath','dance','help','sleep']
plt.pie(daily_activities, labels=names  )
plt.show()

plt.figure(figsize=(10,10))
daily_activities=[1,2,3,4,5,6]
names=['Sleep','Eat','Bath','dance','help','sleep']
plt.pie(daily_activities, labels=names ,autopct='%1.2f%%' )
plt.show()

plt.figure(figsize=(10,10))
daily_activities=[1,2,3,4,5,6]
names=['Sleep','Eat','Bath','dance','help','sleep']
plt.pie(daily_activities, labels=names , autopct='%1.2f%%',explode=(0,0,0,.2,0,0) )
plt.show()

"""**Distribution plot**"""

plt.figure(figsize=(10,5))
sns.distplot(boston_df['MEDV'],color='orangered')
plt.show()

"""**Box Plot**"""

plt.figure(figsize=(10,5))
sns.boxplot(data=iris_df)
plt.show()

plt.figure(figsize=(10,5))
sns.boxplot(data=iris_df,orient='h',palette='magma',)
plt.show()

"""**MEAN

MEDian

MODE**
"""

boston_df['AGE'].median()

boston_df['AGE'].mean()

boston_df['AGE'].mode()

"""HEAT MAP

RELATION BETWEEN CONTINUOUS DATA BETWEEN (-1,1)
"""

boston_df.corr()

plt.figure(figsize=(10,10))
sns.heatmap(boston_df.corr(),annot=True,cmap='icefire')

"""CATPLOT"""

titanic_df=pd.read_csv('https://raw.githubusercontent.com/ammishra08/MachineLearning/master/Datasets/Titanic_Data.csv')
titanic_df

sns.catplot(x='Sex',kind='count',palette='icefire',data=titanic_df, hue='Pclass')

"""SUBPLOTTING"""

fig=plt.figure(figsize=(10,5))
ax1=fig.add_subplot(1,3,1)
sns.distplot(iris_df['sepal_length'],color='red')
ax1.set_title('Ditribution of Sepal length')

ax2=fig.add_subplot(1,3,2)
sns.distplot(iris_df['petal_length'],color='yellow')
ax2.set_title('Ditribution of petal length')
ax3=fig.add_subplot(1,3,3)
sns.distplot(iris_df['petal_width'],color='orangered')
ax3.set_title('Ditribution of Petal width')

"""KERNEL DENSITY PLOT(KDE)"""

iris_setosa=iris_df.query("species=='setosa'")

iris_virginica=iris_df.query("species=='virginica'")

sns.kdeplot(iris_setosa['sepal_length'], shade=True,Label="Setosa") 
sns.kdeplot(iris_virginica['petal_length'],shade=False,Label="Virginica")

sns.kdeplot( iris_setosa['sepal_length'], iris_virginica['petal_length'], shade=True, Label="Setosa",color='Yellow')

"""3D Plot"""

fig=plt.figure(figsize=(10,5))
ax=plt.axes(projection='3d')

ax = plt.axes(projection='3d')

# Data for a three-dimensional line
zline = np.linspace(0, 15, 1000)
xline = np.sin(zline)
yline = np.cos(zline)
ax.plot3D(xline, yline, zline, 'gray')

ax = plt.axes(projection='3d')



# Data for three-dimensional scattered points
zdata = 15 * np.random.random(100)
xdata = np.sin(zdata) + 0.1 * np.random.randn(100)
ydata = np.cos(zdata) + 0.1 * np.random.randn(100)
ax.scatter3D(xdata, ydata, zdata, c=zdata, cmap='Greens');

ax = plt.axes(projection='3d')

# Data for a three-dimensional line
zline = np.linspace(0, 15, 1000)
xline = np.sin(zline)
yline = np.cos(zline)
ax.plot3D(xline, yline, zline, 'gray')
# Data for three-dimensional scattered points
zdata = 15 * np.random.random(100)
xdata = np.sin(zdata) + 0.1 * np.random.randn(100)
ydata = np.cos(zdata) + 0.1 * np.random.randn(100)
ax.scatter3D(xdata, ydata, zdata, cmap='Greens')
ax.set_title('surface')

def fun(x,y):
  return np.cos(np.sqrt(x**2+y**2))
x=np.linspace(-5,5,30)
y=np.linspace(-5,5,30)

X,Y=np.meshgrid(x,y)
Z=fun(X,Y)
fig=plt.figure(figsize=(10,5))
ax = plt.axes(projection='3d')
ax.contour3D(X,Y,Z,50,cmap='Reds')

